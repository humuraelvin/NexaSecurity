from fastapi import APIRouter, Depends, HTTPException
from typing import Any, List, Optional
from app.core.database import get_database
from app.services.auth import get_current_user
from app.models.user import UserInDB
from app.models.scan import (
    VulnerabilityResponse,
    VulnerabilitySeverity
)
from motor.motor_asyncio import AsyncIOMotorDatabase
from bson import ObjectId
import logging

router = APIRouter()
logger = logging.getLogger(__name__)

@router.get("/{vulnerability_id}", response_model=VulnerabilityResponse)
async def get_vulnerability(
    vulnerability_id: str,
    db = Depends(get_database),
    current_user: UserInDB = Depends(get_current_user)
) -> Any:
    """
    Get vulnerability by ID.
    """
    if not ObjectId.is_valid(vulnerability_id):
        raise HTTPException(
            status_code=400,
            detail="Invalid vulnerability ID format"
        )
        
    vuln = await db["vulnerabilities"].find_one({"_id": ObjectId(vulnerability_id)})
    
    if not vuln:
        raise HTTPException(
            status_code=404,
            detail="Vulnerability not found"
        )
    
    # Check if the user has access to the scan that contains this vulnerability
    scan = await db["scans"].find_one({
        "_id": vuln["scan_id"],
        "user_id": ObjectId(current_user.id)
    })
    
    if not scan:
        raise HTTPException(
            status_code=403,
            detail="You don't have access to this vulnerability"
        )
    
    return {
        "id": str(vuln["_id"]),
        "name": vuln["name"],
        "description": vuln["description"],
        "severity": vuln["severity"],
        "cve_ids": vuln.get("cve_ids"),
        "cvss_score": vuln.get("cvss_score"),
        "affected_components": vuln.get("affected_components"),
        "remediation": vuln.get("remediation"),
        "references": vuln.get("references")
    }

@router.get("/", response_model=List[VulnerabilityResponse])
async def list_vulnerabilities(
    skip: int = 0,
    limit: int = 20,
    severity: Optional[VulnerabilitySeverity] = None,
    db = Depends(get_database),
    current_user: UserInDB = Depends(get_current_user)
) -> Any:
    """
    List vulnerabilities for the current user.
    """
    # Get scan IDs that belong to the user
    scan_cursor = db["scans"].find({"user_id": ObjectId(current_user.id)}, {"_id": 1})
    scan_ids = [scan["_id"] async for scan in scan_cursor]
    
    if not scan_ids:
        return []
    
    # Build query for vulnerabilities
    query = {"scan_id": {"$in": scan_ids}}
    
    if severity:
        query["severity"] = severity
    
    # Get total count for pagination
    total = await db["vulnerabilities"].count_documents(query)
    
    # Get vulnerabilities
    cursor = db["vulnerabilities"].find(query).skip(skip).limit(limit).sort("created_at", -1)
    vulns = await cursor.to_list(length=limit)
    
    return [
        {
            "id": str(vuln["_id"]),
            "name": vuln["name"],
            "description": vuln["description"],
            "severity": vuln["severity"],
            "cve_ids": vuln.get("cve_ids"),
            "cvss_score": vuln.get("cvss_score"),
            "affected_components": vuln.get("affected_components"),
            "remediation": vuln.get("remediation"),
            "references": vuln.get("references")
        }
        for vuln in vulns
    ] 