from typing import Optional, List, Dict, Any
from datetime import datetime
from enum import Enum
from pydantic import BaseModel, Field
from app.models.base import MongoBaseModel, PyObjectId

class PentestType(str, Enum):
    QUICK = "quick"
    STANDARD = "standard" 
    COMPREHENSIVE = "comprehensive"
    WEBAPP = "webapp"
    NETWORK = "network"
    CUSTOM = "custom"

class PentestStatus(str, Enum):
    PENDING = "pending"
    IN_PROGRESS = "in_progress"
    COMPLETED = "completed"
    FAILED = "failed"
    CANCELLED = "cancelled"

class PentestScope(str, Enum):
    BLACK_BOX = "black_box"
    GREY_BOX = "grey_box"
    WHITE_BOX = "white_box"
    RED_TEAM = "red_team"
    PURPLE_TEAM = "purple_team"

class FindingSeverity(str, Enum):
    CRITICAL = "critical"
    HIGH = "high"
    MEDIUM = "medium"
    LOW = "low"
    INFO = "info"

class FindingStatus(str, Enum):
    OPEN = "open"
    FIXED = "fixed"
    ACKNOWLEDGED = "acknowledged"
    FALSE_POSITIVE = "false_positive"

class PentestOptions(BaseModel):
    portScan: bool = False
    vulnScan: bool = False
    bruteForce: bool = False
    sqlInjection: bool = False
    xss: bool = False
    networkMapping: bool = False
    osFingerprinting: bool = False
    serviceDetection: bool = False
    csrfTesting: bool = False
    fileUploadTesting: bool = False
    authenticationBypass: bool = False
    routerTesting: bool = False
    firewallTesting: bool = False

class PentestTarget(BaseModel):
    url: str
    type: PentestType
    options: PentestOptions

class PentestCreate(BaseModel):
    name: str
    target: str
    pentest_type: PentestType
    scope: PentestScope
    objectives: Optional[List[str]] = None
    custom_tests: Optional[List[str]] = None

class PentestInDB(MongoBaseModel):
    user_id: PyObjectId
    name: str
    target: str
    pentest_type: PentestType
    status: PentestStatus = PentestStatus.PLANNING
    scope: PentestScope
    objectives: Optional[List[str]] = None
    custom_tests: Optional[List[str]] = None
    progress: float = 0.0
    start_time: Optional[datetime] = None
    end_time: Optional[datetime] = None
    error_message: Optional[str] = None
    finding_counts: dict = Field(default_factory=lambda: {
        "critical": 0,
        "high": 0,
        "medium": 0,
        "low": 0,
        "info": 0
    })
    test_results: Dict = Field(default_factory=dict)
    recommendations: List[str] = Field(default_factory=list)

    class Collection:
        name = "pentests"

class FindingBase(BaseModel):
    title: str
    description: str
    severity: FindingSeverity
    cvss_score: Optional[float] = None
    cwe_id: Optional[str] = None
    affected_components: Optional[List[str]] = None
    impact: Optional[str] = None
    steps_to_reproduce: Optional[List[str]] = None
    remediation: Optional[str] = None
    references: Optional[List[str]] = None

class FindingCreate(FindingBase):
    pass

class FindingInDB(MongoBaseModel, FindingBase):
    pentest_id: PyObjectId
    status: FindingStatus = FindingStatus.OPEN
    proof_of_concept: Optional[str] = None
    technical_details: Optional[str] = None
    risk_score: Optional[float] = None
    mitigation_complexity: Optional[str] = None
    estimated_fix_time: Optional[str] = None
    assigned_to: Optional[str] = None
    fixed_in_version: Optional[str] = None
    fixed_date: Optional[datetime] = None
    verification_notes: Optional[str] = None

    class Collection:
        name = "findings"

class PentestResponse(BaseModel):
    id: str
    user_id: str
    name: str
    target: str
    pentest_type: PentestType
    status: PentestStatus
    scope: PentestScope
    objectives: Optional[List[str]]
    custom_tests: Optional[List[str]]
    progress: float
    start_time: Optional[datetime]
    end_time: Optional[datetime]
    error_message: Optional[str]
    finding_counts: dict
    test_results: Dict
    recommendations: List[str]
    created_at: datetime
    updated_at: datetime

class FindingResponse(BaseModel):
    id: str
    pentest_id: str
    title: str
    description: str
    severity: FindingSeverity
    status: FindingStatus
    cvss_score: Optional[float]
    cwe_id: Optional[str]
    affected_components: Optional[List[str]]
    impact: Optional[str]
    steps_to_reproduce: Optional[List[str]]
    remediation: Optional[str]
    references: Optional[List[str]]
    proof_of_concept: Optional[str]
    technical_details: Optional[str]
    risk_score: Optional[float]
    mitigation_complexity: Optional[str]
    estimated_fix_time: Optional[str]
    assigned_to: Optional[str]
    fixed_in_version: Optional[str]
    fixed_date: Optional[datetime]
    verification_notes: Optional[str]
    created_at: datetime
    updated_at: datetime

class PenetrationTest(BaseModel):
    id: str
    name: str
    scope: str
    status: PentestStatus
    start_date: datetime
    end_date: Optional[datetime] = None
    user_id: str
    created_at: datetime
    updated_at: Optional[datetime] = None

class PentestFinding(BaseModel):
    id: str
    title: str
    description: str
    severity: FindingSeverity
    status: FindingStatus
    pentest_id: str
    created_at: datetime
    updated_at: Optional[datetime] = None

class PentestInput(BaseModel):
    url: str
    type: PentestType
    options: PentestOptions

class PentestStatus(BaseModel):
    completed: bool
    progress: Optional[float] = 0
    status: PentestStatus = PentestStatus.PENDING
    message: Optional[str] = None 