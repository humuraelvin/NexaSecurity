import { fetchConfig, API_URL } from '@/lib/api';
import { PentestResult, PentestFinding, SystemHealth } from "@/types/index"
import { getAuthToken } from '@/lib/auth';

// Helper function to get headers with auth token
const getAuthHeaders = () => {
  const token = getAuthToken();
  return {
    ...fetchConfig.headers,
    'Authorization': `Bearer ${token}`,
    'Content-Type': 'application/json',
  };
};

export interface PentestTarget {
  url: string;
  type: string;
  options: {
    portScan: boolean;
    vulnScan: boolean;
    bruteForce: boolean;
    sqlInjection: boolean;
    xss: boolean;
  };
}

export const pentestApi = {
  startPentest: async (config: any) => {
    try {
      const response = await fetch(`${API_URL}/pentests/start`, {
        method: 'POST',
        headers: getAuthHeaders(),
        body: JSON.stringify(config)
      });
      
      if (response.status === 401) {
        throw new Error('Authentication required. Please log in again.');
      }
      
      if (!response.ok) {
        const error = await response.text();
        throw new Error(`Failed to start pentest: ${error}`);
      }
      return response.json();
    } catch (error) {
      console.error('Error in startPentest:', error);
      throw error;
    }
  },

  getPentestStatus: async (id: string) => {
    try {
      const response = await fetch(`${API_URL}/pentests/${id}/status`, {
        headers: getAuthHeaders()
      });
      
      if (response.status === 401) {
        throw new Error('Authentication required. Please log in again.');
      }
      
      if (!response.ok) {
        const error = await response.text();
        throw new Error(`Failed to get pentest status: ${error}`);
      }
      return response.json();
    } catch (error) {
      console.error('Error in getPentestStatus:', error);
      throw error;
    }
  },

  getPentestResults: async (id: string): Promise<PentestResult> => {
    try {
      const response = await fetch(`${API_URL}/pentests/${id}/results`, {
        ...fetchConfig
      });
      
      if (!response.ok) {
        const error = await response.text();
        throw new Error(`Failed to get pentest results: ${error}`);
      }
      const data = await response.json();
      return data || null;
    } catch (error) {
      console.error('Error in getPentestResults:', error);
      throw error;
    }
  },

  getAllPentests: async () => {
    try {
      const response = await fetch(`${API_URL}/pentests`, {
        ...fetchConfig
      });
      
      if (!response.ok) {
        const error = await response.text();
        throw new Error(`Failed to get pentests: ${error}`);
      }
      const data = await response.json();
      return data || [];
    } catch (error) {
      console.error('Error in getAllPentests:', error);
      throw error;
    }
  }
};

export const systemApi = {
  getSystemHealth: async (): Promise<SystemHealth | null> => {
    try {
      const response = await fetch(`${API_URL}/system/health`, {
        headers: getAuthHeaders()
      });
      
      if (response.status === 401) {
        throw new Error('Authentication required. Please log in again.');
      }
      
      if (!response.ok) {
        if (response.status === 404) {
          console.warn('System health endpoint not found');
          return null;
        }
        const error = await response.text();
        throw new Error(`Failed to get system health: ${error}`);
      }

      const data = await response.json();
      return data || {
        status: 'unknown',
        cpu: 0,
        memory: 0,
        disk: 0,
        uptime: 0,
        lastUpdate: new Date().toISOString()
      };
    } catch (error) {
      console.error('Error getting system health:', error);
      if (error instanceof Error && error.message.includes('Authentication required')) {
        throw error; // Re-throw authentication errors
      }
      // Return default state for other errors
      return {
        status: 'error',
        cpu: 0,
        memory: 0,
        disk: 0,
        uptime: 0,
        lastUpdate: new Date().toISOString(),
        error: error instanceof Error ? error.message : 'Unknown error'
      };
    }
  }
};

export async function runPenetrationTest(target: PentestTarget): Promise<{ success: boolean, message?: string }> {
  try {
    const response = await fetch(`${API_URL}/api/pentest/run`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(target),
    });
    
    if (!response.ok) {
      const error = await response.text();
      throw new Error(`Failed to run penetration test: ${error}`);
    }
    
    return await response.json();
  } catch (error) {
    console.error('Error running penetration test:', error);
    throw error;
  }
}

export async function getPentestResults(): Promise<PentestResult[]> {
  try {
    const response = await fetch(`${API_URL}/pentests`, {
      ...fetchConfig
    });
    
    if (!response.ok) {
      const error = await response.text();
      throw new Error(`Failed to fetch penetration test results: ${error}`);
    }
    
    const data = await response.json();
    return data || [];
  } catch (error) {
    console.error('Error fetching penetration test results:', error);
    throw error;
  }
}

export async function getPentestResultDetails(id: string): Promise<PentestResult | null> {
  try {
    const response = await fetch(`${API_URL}/api/pentest/results/${id}`);
    
    if (!response.ok) {
      const error = await response.text();
      throw new Error(`Failed to fetch penetration test details: ${error}`);
    }
    
    const data = await response.json();
    return data || null;
  } catch (error) {
    console.error('Error fetching penetration test details:', error);
    throw error;
  }
} 