"use client"
import { useState, useEffect } from "react";
import { toast } from "react-hot-toast";
import { pentestApi } from "@/services/pentestService";
import type { PentestTarget, PentestResult, PentestFinding } from "@/types/index";
import { API_URL, fetchConfig } from "@/lib/api";
import SummaryCards from "@/components/dashboard/SummaryCards";
import ActionButtons from "@/components/dashboard/ActionButtons";
import { Terminal, AlertTriangle, CheckCircle, Clock, Shield, Network, Database, Globe, Code } from "lucide-react";
const testTypes = [
  {
    id: "quick",
    name: "Quick Scan",
    description: "Fast scan of common vulnerabilities and open ports",
    duration: "5-10 minutes",
    defaultOptions: {
      portScan: true,
      vulnScan: true,
      bruteForce: false,
      sqlInjection: false,
      xss: false,
      networkMapping: false,
      osFingerprinting: false,
      serviceDetection: true
    }
  },
  {
    id: "standard",
    name: "Standard Scan",
    description: "Balanced scan for vulnerabilities, open ports, and basic exploits",
    duration: "15-30 minutes",
    defaultOptions: {
      portScan: true,
      vulnScan: true,
      bruteForce: false,
      sqlInjection: true,
      xss: true,
      networkMapping: true,
      osFingerprinting: true,
      serviceDetection: true
    }
  },
  {
    id: "comprehensive",
    name: "Comprehensive Scan",
    description: "In-depth scan of all vulnerabilities, services, and potential exploits",
    duration: "1-2 hours",
    defaultOptions: {
      portScan: true,
      vulnScan: true,
      bruteForce: true,
      sqlInjection: true,
      xss: true,
      networkMapping: true,
      osFingerprinting: true,
      serviceDetection: true
    }
  },
  {
    id: "webapp",
    name: "Web Application Scan",
    description: "Focused on web vulnerabilities like XSS, CSRF, SQL injection",
    duration: "20-40 minutes",
    defaultOptions: {
      portScan: false,
      vulnScan: true,
      bruteForce: false,
      sqlInjection: true,
      xss: true,
      csrfTesting: true,
      fileUploadTesting: true,
      authenticationBypass: true,
      networkMapping: false,
      osFingerprinting: false,
      serviceDetection: false
    }
  },
  {
    id: "network",
    name: "Network Infrastructure Scan",
    description: "Focuses on network devices, topology, and services",
    duration: "30-45 minutes",
    defaultOptions: {
      portScan: true,
      vulnScan: true,
      bruteForce: false,
      sqlInjection: false,
      xss: false,
      networkMapping: true,
      routerTesting: true,
      firewallTesting: true,
      osFingerprinting: true,
      serviceDetection: true
    }
  },
  {
    id: "custom",
    name: "Custom Scan",
    description: "Configure your own scan parameters",
    duration: "Varies based on configuration",
    defaultOptions: {
      portScan: true,
      vulnScan: true,
      bruteForce: false,
      sqlInjection: false,
      xss: false,
      networkMapping: false,
      osFingerprinting: false,
      serviceDetection: true
    }
  }
];

function getIconForTestType(type: string) {
  switch (type) {
    case 'quick':
      return <Terminal className="h-5 w-5 text-cyan-400" />;
    case 'standard':
      return <Shield className="h-5 w-5 text-green-400" />;
    case 'comprehensive':
      return <AlertTriangle className="h-5 w-5 text-yellow-400" />;
    case 'webapp':
      return <Globe className="h-5 w-5 text-blue-400" />;
    case 'network':
      return <Network className="h-5 w-5 text-purple-400" />;
    case 'custom':
      return <Code className="h-5 w-5 text-orange-400" />;
    default:
      return <Terminal className="h-5 w-5 text-cyan-400" />;
  }
}

export default function PenetrationTestPage() {
  const [isRunning, setIsRunning] = useState(false);
  const [results, setResults] = useState<PentestResult[]>([]);
  const [targetUrl, setTargetUrl] = useState("");
  const [scanType, setScanType] = useState("quick");
  const [scanOptions, setScanOptions] = useState(testTypes[0].defaultOptions);
  const [showAdvancedOptions, setShowAdvancedOptions] = useState(false);

  useEffect(() => {
    // Load previous results when component mounts
    const loadResults = async () => {
      try {
        const data = await pentestApi.getAllPentests();
        setResults(data);
      } catch (error) {
        console.error("Error loading pentest results:", error);
        toast.error("Failed to load previous test results");
      }
    };

    loadResults();
  }, []);

  // Update scan options when scan type changes
  useEffect(() => {
    const selectedType = testTypes.find(type => type.id === scanType);
    if (selectedType) {
      setScanOptions(selectedType.defaultOptions);
      if (scanType === "custom") {
        setShowAdvancedOptions(true);
      } else {
        setShowAdvancedOptions(false);
      }
    }
  }, [scanType]);

  const handleOptionChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, checked } = e.target;
    setScanOptions(prev => ({ ...prev, [name]: checked }));
  };

  const handleStartTest = async () => {
    if (!targetUrl) {
      toast.error("Please enter a target URL");
      return;
    }

    try {
      setIsRunning(true);
      toast.loading("Starting penetration test...");

      const target: PentestTarget = {
        url: targetUrl,
        type: scanType,
        options: scanOptions
      };

      // Start the pentest
      const { scanId } = await pentestApi.startPentest(target);
      
      // Poll for status
      const statusInterval = setInterval(async () => {
        const status = await pentestApi.getPentestStatus(scanId);
        
        if (status.completed) {
          clearInterval(statusInterval);
          setIsRunning(false);
          toast.dismiss();
          toast.success("Penetration test completed!");
          
          // Get updated results
          const updatedResults = await pentestApi.getAllPentests();
          setResults(updatedResults);
        }
      }, 3000);

    } catch (error) {
      console.error("Error running penetration test:", error);
      setIsRunning(false);
      toast.dismiss();
      toast.error("Failed to run penetration test");
    }
  };

  const handleViewReport = async (id: string) => {
    try {
      const report = await pentestApi.getPentestResults(id);
    } catch (error) {
      console.error("Error fetching report:", error);
      toast.error("Failed to load report");
    }
  };

  const handleDownloadReport = async (id: string) => {
    try {
      // Implement download functionality
      const response = await fetch(`${API_URL}/pentests/${id}/download`, {
        ...fetchConfig
      });
      
      if (!response.ok) throw new Error('Failed to download report');
      
      const blob = await response.blob();
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `pentest-report-${id}.pdf`;
      document.body.appendChild(a);
      a.click();
      window.URL.revokeObjectURL(url);
      document.body.removeChild(a);
      
      toast.success("Report downloaded successfully");
    } catch (error) {
      console.error("Error downloading report:", error);
      toast.error("Failed to download report");
    }
  };

  return (
    <div>
      <div className="flex flex-col md:flex-row md:items-center md:justify-between mb-6">
        <h1 className="text-2xl font-bold mb-2 md:mb-0">Penetration Testing</h1>
        <ActionButtons 
          primaryAction={{
            label: isRunning ? "Running Scan..." : "Run New Scan",
            onClick: handleStartTest,
            disabled: isRunning || !targetUrl,
            icon: <Terminal className="h-4 w-4" />
          }}
        />
      </div>

      {/* Test Configuration */}
      <div className="bg-gray-900/50 backdrop-blur-sm border border-gray-800/60 rounded-lg p-6 mb-8">
        <h2 className="text-xl font-medium mb-4">Test Configuration</h2>
        
        <div className="mb-6">
          <label className="block text-sm font-medium text-gray-300 mb-2">Target URL or IP</label>
          <input
            type="text"
            value={targetUrl}
            onChange={(e) => setTargetUrl(e.target.value)}
            placeholder="https://example.com or 192.168.1.1"
            className="w-full px-4 py-2 bg-gray-800/50 border border-gray-700 rounded-md focus:outline-none focus:ring-2 focus:ring-cyan-500 focus:border-transparent"
            disabled={isRunning}
          />
        </div>

        <div className="mb-6">
          <label className="block text-sm font-medium text-gray-300 mb-2">Scan Type</label>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {testTypes.map((type) => (
              <div 
                key={type.id}
                className={`p-4 border rounded-md cursor-pointer transition-colors ${
                  scanType === type.id 
                    ? "bg-cyan-900/30 border-cyan-500" 
                    : "bg-gray-800/30 border-gray-700 hover:bg-gray-800/50"
                }`}
                onClick={() => setScanType(type.id)}
              >
                <div className="flex items-center mb-2">
                  {getIconForTestType(type.id)}
                  <h3 className="ml-2 font-medium">{type.name}</h3>
                </div>
                <p className="text-sm text-gray-400">{type.description}</p>
                <p className="text-xs text-gray-500 mt-2">Duration: {type.duration}</p>
              </div>
            ))}
          </div>
        </div>

        <div className="mb-4 flex items-center">
          <button
            type="button"
            className="text-sm text-cyan-400 hover:text-cyan-300 flex items-center"
            onClick={() => setShowAdvancedOptions(!showAdvancedOptions)}
          >
            {showAdvancedOptions ? "Hide" : "Show"} Advanced Options
            <svg className={`ml-1 h-4 w-4 transform ${showAdvancedOptions ? "rotate-180" : ""}`} fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
            </svg>
          </button>
        </div>

        {showAdvancedOptions && (
          <div className="bg-gray-800/30 p-4 rounded-md border border-gray-700 mb-4">
            <h3 className="font-medium mb-3">Scan Options</h3>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-x-6 gap-y-3">
              {Object.entries(scanOptions).map(([key, value]) => (
                <div key={key} className="flex items-center">
                  <input
                    type="checkbox"
                    id={key}
                    name={key}
                    checked={value}
                    onChange={handleOptionChange}
                    className="h-4 w-4 text-cyan-500 focus:ring-cyan-400 border-gray-600 rounded"
                    disabled={isRunning}
                  />
                  <label htmlFor={key} className="ml-2 text-sm text-gray-300">
                    {key.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase())}
                  </label>
                </div>
              ))}
            </div>
            
            <div className="mt-4">
              <h3 className="font-medium mb-2">Scan Intensity</h3>
              <div className="flex items-center">
                <span className="text-xs text-gray-400 mr-2">Low</span>
                <input
                  type="range"
                  min="1"
                  max="5"
                  defaultValue="3"
                  className="w-full h-2 bg-gray-700 rounded-lg appearance-none cursor-pointer"
                  disabled={isRunning}
                />
                <span className="text-xs text-gray-400 ml-2">High</span>
              </div>
              <p className="text-xs text-gray-500 mt-1">Higher intensity may trigger IDS/IPS systems and be more detectable</p>
            </div>
          </div>
        )}

        {isRunning && (
          <div className="bg-blue-900/20 border border-blue-800/50 rounded-md p-4 mt-4">
            <div className="flex items-center mb-2">
              <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-cyan-500 mr-2"></div>
              <h3 className="font-medium text-cyan-400">Scan in Progress</h3>
            </div>
            <p className="text-sm text-gray-400">Running {testTypes.find(t => t.id === scanType)?.name} against {targetUrl}</p>
            <div className="w-full bg-gray-700 rounded-full h-2.5 mt-3">
              <div className="bg-cyan-500 h-2.5 rounded-full animate-pulse" style={{ width: '60%' }}></div>
            </div>
          </div>
        )}
      </div>

      {/* Previous Results */}
      <div>
        <h2 className="text-xl font-medium mb-4">Previous Results</h2>
        
        {results.length === 0 ? (
          <div className="bg-gray-900/50 backdrop-blur-sm border border-gray-800/60 rounded-lg p-8 text-center">
            <Terminal className="h-12 w-12 text-gray-600 mx-auto mb-3" />
            <p className="text-gray-400">No penetration test results yet</p>
            <p className="text-sm text-gray-500 mt-1">Configure and run your first test to see results here</p>
          </div>
        ) : (
          <div className="space-y-4">
            {results.map((result) => (
              <div key={result.id} className="bg-gray-900/50 backdrop-blur-sm border border-gray-800/60 rounded-lg overflow-hidden">
                <div className="p-6">
                  <div className="flex items-start justify-between mb-4">
                    <div>
                      <h3 className="font-medium flex items-center">
                        {getIconForTestType(result.type)}
                        <span className="ml-2">{result.target}</span>
                      </h3>
                      <p className="text-sm text-gray-400 mt-1">
                        {result.date} • {result.type.charAt(0).toUpperCase() + result.type.slice(1)} Scan
                      </p>
                    </div>
                    <span className={`inline-flex items-center px-2.5 py-1 rounded-full text-xs font-medium ${
                      result.status === 'completed' ? "bg-green-900/30 text-green-400" : 
                      result.status === 'in_progress' ? "bg-blue-900/30 text-blue-400" :
                      "bg-red-900/30 text-red-400"
                    }`}>
                      {result.status === 'completed' ? <CheckCircle className="h-3 w-3 mr-1" /> : 
                       result.status === 'in_progress' ? <Clock className="h-3 w-3 mr-1" /> :
                       <AlertTriangle className="h-3 w-3 mr-1" />}
                      {result.status.charAt(0).toUpperCase() + result.status.slice(1)}
                    </span>
                  </div>
                  
                  {result.status === 'completed' && (
                    <div className="grid grid-cols-3 gap-4 mb-4">
                      <div className="bg-gray-800/30 p-3 rounded-md">
                        <p className="text-xs text-gray-400">Critical</p>
                        <p className="text-xl font-semibold text-red-400">{result.criticalVulnerabilities || 0}</p>
                      </div>
                      <div className="bg-gray-800/30 p-3 rounded-md">
                        <p className="text-xs text-gray-400">Medium</p>
                        <p className="text-xl font-semibold text-yellow-400">{result.mediumVulnerabilities || 0}</p>
                      </div>
                      <div className="bg-gray-800/30 p-3 rounded-md">
                        <p className="text-xs text-gray-400">Low</p>
                        <p className="text-xl font-semibold text-blue-400">{result.lowVulnerabilities || 0}</p>
                      </div>
                    </div>
                  )}
                  
                  {result.findings && result.findings.length > 0 && (
                    <div className="mt-4">
                      <h4 className="text-sm font-medium text-gray-300 mb-2">Key Findings</h4>
                      <ul className="space-y-2">
                        {result.findings.slice(0, 3).map((finding: PentestFinding, idx: number) => (
                          <li key={idx} className="flex items-start">
                            <span className={`inline-flex items-center justify-center h-5 w-5 rounded-full mr-2 flex-shrink-0 ${
                              finding.severity === 'critical' ? "bg-red-900/30 text-red-400" : 
                              finding.severity === 'medium' ? "bg-yellow-900/30 text-yellow-400" : 
                              "bg-blue-900/30 text-blue-400"
                            }`}>
                              <span className="text-xs">{finding.severity.charAt(0).toUpperCase()}</span>
                            </span>
                            <span className="text-sm">{finding.description}</span>
                          </li>
                        ))}
                      </ul>
                      {result.findings.length > 3 && (
                        <button 
                          className="text-sm text-cyan-400 hover:text-cyan-300 mt-2"
                          onClick={() => toast.success(`Viewing all ${result.findings?.length} findings`)}
                        >
                          View all {result.findings.length} findings
                        </button>
                      )}
                    </div>
                  )}
                </div>
                
                <div className="bg-gray-800/30 px-6 py-3 flex justify-end">
                  <button 
                    className="text-sm text-cyan-400 hover:text-cyan-300 mr-4"
                    onClick={() => handleViewReport(result.id)}
                  >
                    View Full Report
                  </button>
                  <button 
                    className="text-sm text-cyan-400 hover:text-cyan-300"
                    onClick={() => handleDownloadReport(result.id)}
                  >
                    Download Report
                  </button>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );
} 