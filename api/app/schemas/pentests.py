from pydantic import BaseModel
from typing import List, Dict, Optional, Literal, Any
from datetime import datetime

class PentestTarget(BaseModel):
    url: str
    type: str
    options: Dict[str, bool]

class PentestStartResponse(BaseModel):
    scanId: str
    message: str

class PentestStatus(BaseModel):
    completed: bool
    progress: int
    current_step: str
    estimated_time_remaining: Optional[int] = None

class PentestFinding(BaseModel):
    id: str
    title: str
    description: str
    severity: Literal["critical", "high", "medium", "low", "info"]
    affected_component: str
    type: str
    cve_id: Optional[str] = None
    remediation: Optional[str] = None
    discovered_at: Optional[str] = None

class PentestResult(BaseModel):
    id: str
    target: str
    start_time: datetime
    end_time: Optional[datetime] = None
    status: Literal["running", "completed", "failed"]
    summary: str
    findings: List[Dict[str, Any]]
    scan_type: str
    total_findings: int
    critical_findings: int
    high_findings: int
    medium_findings: int
    low_findings: int
    
    class Config:
        from_attributes = True
        json_encoders = {
            datetime: lambda v: v.isoformat()
        } 
        